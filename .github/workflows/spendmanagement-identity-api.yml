name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Restore dependencies
      run: dotnet restore src/SpendManagement.Identity.API/SpendManagement.Identity.API.csproj
    - name: Build
      run: dotnet build --no-restore --configuration Release src/SpendManagement.Identity.API/SpendManagement.Identity.API.csproj

  unit-tests:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies for unit tests
        run: dotnet restore tests/SpendManagement.UnitTests/SpendManagement.UnitTests.csproj
      - name: Build project
        run: dotnet build --no-restore --configuration Release tests/SpendManagement.UnitTests/SpendManagement.UnitTests.csproj
      - name: Run unit tests
        run: dotnet test --verbosity normal tests/SpendManagement.UnitTests/SpendManagement.UnitTests.csproj

  publish-docker-image:
    runs-on: ubuntu-latest
    needs: unit-tests
  
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build Docker image
        run: docker build -t fmattioli/spendmanagement-identity-api:1.0.0.2 --build-arg ASPNETCORE_ENVIRONMENT=Development .
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push Docker image to Docker Hub
        run: |
          docker push fmattioli/spendmanagement-identity-api:1.0.0.2
          docker push fmattioli/spendmanagement-identity-api:latest

  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:10.18-jessie

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Run some command in the container
        run: echo "Hello from the container"
